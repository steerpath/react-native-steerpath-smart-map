/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, {
  Component
} from "react";
import {
  View,
  Button
} from "react-native-web"

// For native platform
// For web
export default class TestAPIMethods extends Component {
  // The api key prop provided here is for the web platform
  constructor(props){
    super(props)
    this.handleStartUserTask = this.handleStartUserTask.bind(this)
    this.handleGetCurrentUserTask = this.handleGetCurrentUserTask.bind(this)
    this.handleCancelCurrentUserTask = this.handleCancelCurrentUserTask.bind(this)
    this.handleAddMarkers = this.handleAddMarkers.bind(this)
  }

  componentDidMount(){
    
  }
  
  handleStartUserTask() {
    console.log("handleStartUserTask", this.props.smartMapRef)
    let source = "poi"
    let buildingRef = "67"
    let localRef = "Kitchen"
    
    this.props.smartMapRef.getMapObject(localRef, buildingRef, source, (data) => {
        if (data) {
            let smartMapObject = data
            let addMarker = true
            let actionButtonText = "Show Details"
            let actionButtonIcon = "category_fun"

            let poiSelectionUserTask = new window.steerpath.POISelectionUserTask(smartMapObject, addMarker, actionButtonText, actionButtonIcon)
             this.props.smartMapRef.startUserTask(poiSelectionUserTask)
        }
    })
  }

  handleGetCurrentUserTask(){
        this.props.smartMapRef.getCurrentUserTask()
  }
  

  handleCancelCurrentUserTask(){
        this.props.smartMapRef.cancelCurrentUserTask()
  }

  handleAddMarkers(){
      let mapObjectsArray = []
      let mapObject = {}
      let markerData = {
          "type": "FeatureCollection",
          "features": [{
                  "type": "Feature",
                  "properties": {
                      "buildingRef": "67",
                      "localRef": "marker-1",
                      "layerIndex": 2,
                      "title": "Storage",
                  },
                  "geometry": {
                      "type": "Point",
                      "coordinates": [
                          24.812347779728384,
                          60.22096782045503
                      ]
                  }
              },
              {
                  "type": "Feature",
                  "properties": {
                      "buildingRef": "67",
                      "localRef": "marker-2",
                      "layerIndex": 2,
                      "title": "Operations"
                  },
                  "geometry": {
                      "type": "Point",
                      "coordinates": [
                          24.81240749359131,
                          60.22089226088821
                      ]
                  }
              },
              {
                  "type": "Feature",
                  "properties": {
                      "buildingRef": "67",
                      "localRef": "marker-3",
                      "layerIndex": 2,
                      "title": "Toilets"
                  },
                  "geometry": {
                      "type": "Point",
                      "coordinates": [
                          24.81246918439865,
                          60.22095353923612
                      ]
                  }
              },
              {
                  "type": "Feature",
                  "properties": {
                      "buildingRef": "67",
                      "localRef": "marker-4",
                      "layerIndex": 2,
                      "title": "Mobile"
                  },
                  "geometry": {
                      "type": "Point",
                      "coordinates": [
                          24.812388718128204,
                          60.22101215320083
                      ]
                  }
              },
              {
                  "type": "Feature",
                  "properties": {
                      "buildingRef": "67",
                      "localRef": "marker-5",
                      "layerIndex": 2,
                      "title": "Web"
                  },
                  "geometry": {
                      "type": "Point",
                      "coordinates": [
                          24.81227606534958,
                          60.22099616758448
                      ]
                  }
              }
          ]
      }


          for (let i = 0; i < markerData.features.length; i++) {
              const eachMarker = markerData.features[i];

              let lat = eachMarker.geometry.coordinates[1]
              let lon = eachMarker.geometry.coordinates[0]
              let floorIndex = eachMarker.properties.layerIndex
              let buildingRef = eachMarker.properties.buildingRef
              let localRef = eachMarker.properties.localRef
              let title = eachMarker.properties.title

              let eachSmartObject = new window.steerpath.SmartMapObject(lat, lon, floorIndex, buildingRef, localRef, title)
              mapObjectsArray.push(eachSmartObject)
          }
          //mapObjectsArray
          this.props.smartMapRef.addMarkers(mapObjectsArray)
          //mapObjectsArray, layout, iconImage, textColor, textHaloColor
          //smartMapView.addMarkers(mapObjectsArray, "bottom", "category_marker_pink", "#ff2f92", "#fff")
      
  }

  render(){
    return (
      <View style={{flex: 1}}>
        <Button
        title="startUserTask"
        onPress={this.handleStartUserTask}></Button>
        <Button
        title="getCurrentUserTask"
        onPress={this.handleGetCurrentUserTask}></Button>
        <Button
        title="cancelCurrentUserTask"
        onPress={this.handleCancelCurrentUserTask}></Button>
        <Button
        title="addMarkers"
        onPress={this.handleAddMarkers}></Button>
      </View>
    )
  }
}

